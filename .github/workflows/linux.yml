name: Linux

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  lint:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: zig/zig build lint
    env:
      SOURCE_REPO: ${{ github.event.pull_request.head.repo.clone_url }}

  docs_link_spellcheck:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/docs_check.sh

  test:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [ubuntu, alpine]
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/tests_on_${{ matrix.distro }}.sh

  cli_client_integration:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: ./scripts/build.sh cli_client_integration
      - run: ./zig-out/bin/cli_client_integration

  benchmark:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/benchmark.sh --transfer-count 4000

  aof:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: ./scripts/test_aof.sh

  c_sample:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: zig/zig build c_sample -Drelease-safe

  # I don't like this - having everything manually listed out here, but need to think of a better
  # way to parallelize it.
  fuzz:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_ewah -- --seed 123
      - run: zig/zig build fuzz_lsm_segmented_array -- --seed 123
      - run: zig/zig build fuzz_lsm_tree -- --seed 123 --events-max 400
      - run: zig/zig build fuzz_vsr_journal_format -- --seed 123
      - run: zig/zig build fuzz_vsr_superblock -- --seed 123 --events-max 3
      - run: zig/zig build fuzz_vsr_superblock_quorums -- --seed 123

      # Disabled for now, since they're slow.
      # # This both checks that the hash_log builds and acts as a regression test for
      # # https://github.com/tigerbeetledb/tigerbeetle/issues/404
      # - run: zig/zig build fuzz_lsm_manifest_log -- --seed 123 --events-max 400
      # - run: zig/zig build fuzz_vsr_superblock_free_set -- --seed 123
      # - run: zig/zig build fuzz_lsm_forest -Dhash-log-mode=create -Drelease-safe -- --seed 16319736705930193193 --events-max 10000 && zig/zig build fuzz_lsm_forest -Dhash-log-mode=check -- --seed 16319736705930193193 --events-max 10000

  # Check some build steps that would otherwise not get checked.
  # Things like "go_client", "java_client", "dotnet_client" are excluded here
  # because they get run in their own CI
  verify:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: ./scripts/install_zig.sh
      - run: zig/zig build build_benchmark_ewah
      - run: zig/zig build build_benchmark_eytzinger
      - run: zig/zig build build_benchmark_segmented_array
      - run: zig/zig build -Dtracer-backend=tracy

  # This is just a canary to make sure that the simulator compiles
  # It would be a good idea to also _run_ a single iteration,
  # but that currently has some false failures :-)
  # TODO: Make so we have a single zig build simulator that does both
  simulate:
    if: inputs.version == ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: zig/zig build simulator -Dsimulator-state-machine=accounting
      - run: zig/zig build simulator -Dsimulator-state-machine=testing

  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debug: ["debug", "production"]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' && matrix.debug == 'production' }}
          # Each line here is a tag.
          tags: |
            ${{ inputs.version != '' && format('{0}{1}', inputs.version, matrix.debug == 'debug' && '-debug' || '') || '' }}
            ${{ github.ref == 'refs/heads/main' && matrix.debug == 'debug' && 'debug' || '' }}

      - name: 'Build Docker Container'
        uses: docker/build-push-action@v4
        with:
          build-args: |
            DEBUG=${{ matrix.debug == 'debug' && 'true' || 'false' }}

          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # This is required because we can't load multiple platforms. Instead,
      # just load amd64 for verification below.
      - name: 'Load Docker Container'
        id: docker_load
        uses: docker/build-push-action@v4
        with:
          build-args: |
            DEBUG=${{ matrix.debug == 'debug' && 'true' || 'false' }}

          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Validate the image
      - if: matrix.debug == 'production'
        run: ./scripts/confirm_image.sh ${{ steps.docker_load.outputs.imageid }} --want-production
      - if: matrix.debug == 'debug'
        run: ./scripts/confirm_image.sh ${{ steps.docker_load.outputs.imageid }} --want-debug

      # Login and publish, if we're in a release
      - if: inputs.version != ''
        name: 'Login to Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: inputs.version != ''
        name: 'Push Docker Container'
        uses: docker/build-push-action@v4
        with:
          build-args: |
            DEBUG=${{ matrix.debug == 'debug' && 'true' || 'false' }}

          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
